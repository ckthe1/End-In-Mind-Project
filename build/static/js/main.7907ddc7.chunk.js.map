{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/Events.reducer.js","redux/reducers/SelectedEvent.reducer.js","redux/reducers/Contacts.reducer.js","redux/reducers/EventDialog.reducer.js","redux/reducers/awsFilesReducer.js","redux/reducers/usersReducer.js","redux/reducers/editEventReducer.js","redux/reducers/attendeeReducer.js","redux/reducers/Communities.reducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/eventSaga.js","redux/sagas/awsFilesSaga.js","redux/sagas/attendeeSaga.js","redux/sagas/usersSaga.js","redux/sagas/communitiesSaga.js","redux/sagas/index.js","components/Nav/NavNew.js","components/LoginPage/LoginPage.js","components/SelectCommunity/SelectCommunity.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/Upload/UploadForm.js","components/Upload/SingleFile.js","components/Upload/FileDisplay.js","components/Upload/Upload.js","components/Calendar/Calendar.js","components/Contacts/SingleContact.js","components/Contacts/Contacts.js","niceDay.js","niceTime.js","niceBirthday.js","components/AttendeeTable/AttendeeTable.js","components/EventCard/EventCard.js","components/CalendarLanding/CalendarLanding.js","components/AdminSelect/AdminSelectRow.js","components/AdminSelect/AdminSelect.js","components/EventRow/EventRow.js","components/Dashboard/Dashboard.js","components/EventView/EventView.js","components/EventCreateForm/EventCreateForm.js","components/FollowUp/FollowUp.js","components/EventSignUpForm/EventSignUpForm.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","Events","filter","event","id","SelectedEvent","contactsReducer","EventDialog","AWS","usersReducer","editEventReducer","attendeesReducer","Communities","rootReducer","_combineReducers","errors","user","events","selectedEvent","contacts","eventDialog","users","editEvent","attendees","Object","defineProperty","communities","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchEvents","addEvent","fetchContacts","eventSaga","method","url","params","communityId","eventSaga_marked","eventSaga_marked2","eventSaga_marked3","_context4","concat","communityID","_marked4","_context5","takeEvery","_marked5","fetchFiles","addFile","deleteFile","awsFilesSaga_marked","formData","bucketResponse","FormData","append","file","title","description","Location","key","awsFilesSaga_marked2","awsKey","awsFilesSaga_marked3","awsFilesSaga_marked4","fetchAttendees","addAttendee","attendeeSaga","attendeeSaga_marked","attendeeSaga_marked2","attendeeSaga_marked3","fetchUsers","editUser","deleteUser","usersSaga_marked","usersSaga_marked2","delete","usersSaga_marked3","usersSaga_marked4","fetchCommunities","communitiesSaga_marked","communitiesSaga_marked2","rootSaga","all","awsFilesSaga","usersSaga","communitiesSaga","sagas_marked","NavNew","eventDropdownDisplay","communityDropdownDisplay","toggleMenu","document","getElementById","classList","toggle","handleButtonDropdown","buttonName","_this","setState","handleClose","checkOutsideCloseClick","props","dropDownDisplay","_this2","this","react_default","createElement","className","onClick","href","src","alt","is_super_admin","react_router_dom","to","is_community_admin","style","display","dispatch","Component","connect","LoginPage","username","password","login","preventDefault","history","push","handleInputChangeFor","propertyName","target","value","classes","backgroundImage","role","root","container","Paper_default","elevation","marginTop","index_es","marginBottom","fontSize","color","lib","ref","onSubmit","onError","Grid_default","spacing","item","xs","sm","TextField_default","label","fullWidth","classNames","textField","onChange","name","margin","autoComplete","validators","errorMessages","variant","Button_default","size","button","float","withStyles","theme","objectSpread","flexGrow","marginLeft","marginRight","mixins","gutters","paddingTop","unit","paddingBottom","menu","width","icon","verticalAlign","opacity","typography","useNextVariants","maxWidth","SelectCommunity","anchorEl","community","handleClick","currentTarget","handleSelection","selection","onSelect","Menu_default","open","Boolean","onClose","map","MenuItem_default","reduxState","RegisterPage","email","onCommunitySelection","components_SelectCommunity_SelectCommunity","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","react_router","assign","FileDisplay","fileName","handleSubmit","buttonEnable","disabled","handleFileUpload","files","handleChangeFor","property","CustomTableCell","head","backgroundColor","palette","primary","main","common","white","body","TableCell","signedUrl","handleDeleteClick","myFile","then","catch","error","TableRow_default","scope","deleteAccess","align","IconButton_default","iconHover","aria-label","Delete_default","overflowX","&:hover","hasDeleteAccess","Table_default","table","TableHead_default","FileDisplay_CustomTableCell","TableBody_default","index","SingleFile","FileUpload","UploadForm","Upload_FileDisplay","Calendar","setLocalizer","momentLocalizer","moment","CalendarView","eventSelected","calendarStyle","height","react_big_calendar_lib_default","defaultDate","Date","defaultView","views","onSelectEvent","onEventDrop","SingleContact","contact","full_name","phone_number","Contacts","Contacts_SingleContact","options","weekday","month","day","renderDate","dateString","toLocaleDateString","hour","minute","split","year","AttendeeTable","TableCell_default","guy","first_name","last_name","phone","niceDay","dob","sex","household_income","race","minWidth","EventCard","myEvent","start","niceTime","end","contact_name","contact_email","contact_phone","showAll","components_AttendeeTable_AttendeeTable","CalendarLanding","handleCommunitySelected","communityName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","components_Contacts_Contacts","Dialog_default","components_EventCard_EventCard","AdminSelectRow","onDelete","window","confirm","setPropertyOf","isSuperAdmin","Checkbox_default","checked","isAdmin","community_name","approved","AdminSelect","userIsSuperAdmin","userIsAdmin","AdminSelect_AdminSelectRow","EventRow","handleViewDetails","row","community_id","end_time","Dashboard","fullEvent","handlePrint","print","setTimeout","onViewDetails","Print_default","components_EventRow_EventRow","event_id","aria-labelledby","aria-describedby","EventView","handleRunEvent","handleEditEvent","communityNameDisplay","currentCommunity","eventItem","md","Card_default","card","CardMedia_default","media","image","boxShadow","CardContent_default","Typography_default","gutterBottom","event_name","location","dateConvert","timeConvert","CardActions_default","audienceDropdown","EventCreateForm","eventId","eventHeading","eventTitle","selectedDate","start_time","contactName","contactEmail","contactPhone","audienceSize","expected_attendees","eventTypeArray","eventTypes","popUpPodcast","endInMindClub","deathOverDinner","honoringTraining","stevieRay","deathCafe","livingWills","tedTalks","writingParty","healthStory","componentDidMount","componentWillUnmount","handleChange","getEventTypes","entries","forEach","entry","toConsumableArray","alert","handleDateChange","propName","handleEventTypeChange","handleCancelEdit","Event_default","multiline","rowsMax","FormLabel_default","FormControlLabel_default","control","material_ui_pickers_esm","utils","DateFnsUtils","InputProps","endAdornment","InputAdornment_default","position","AccessTime_default","select","SelectProps","MenuProps","option","i","fontWeight","fontStyle","justify","FollowUp","queryOk","comments","refreshEvent","replace","queries","queryString","parseUrl","query","onCommentsChanged","follow_up_comments","placeholder","InputLabelProps","shrink","input","genderDropdown","ethnicityDropdown","incomeDropdown","EventSignUpForm","authorUserId","firstName","lastName","birthDate","income","gender","ethnicity","date","handleCancel","textAlign","fontFamily","pattern","startAdornment","createMuiTheme","light","dark","contrastText","secondary","join","App","core_styles","components_Nav_NavNew","exact","from","components_ProtectedRoute_ProtectedRoute","path","Upload","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","es","components_App_App"],"mappings":"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","file":"static/js/main.7907ddc7.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Please enter your username and password';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Please choose a username and password';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","\nconst Events = (state = [], action) => {\n  switch (action.type) {\n\n    case 'SET_EVENTS': return action.payload;\n\n      // Expecting payload to be an ID\n    case 'REMOVE_EVENT': {\n      return state.filter(event => event.id !== action.payload);\n    }\n\n    default: return state;\n  }\n};\n\nexport default Events;","\nconst SelectedEvent = (state = {}, action) => {\n  switch (action.type) {\n\n    case 'SET_EVENT': return action.payload;\n    case 'CLEAR_EVENT': return {};\n    default: return state;\n  }\n};\n\nexport default SelectedEvent;","const contactsReducer = (state = [], action) => {\n    switch (action.type) {\n  \n      case 'SET_CONTACTS': return action.payload;\n  \n      default: return state;\n    }\n  };\n  \n  export default contactsReducer;","\nconst EventDialog = (state = false, action) => {\n  switch (action.type) {\n    case 'EVENT_DIALOG': return action.payload;\n    default: return state;\n  }\n};\n\nexport default EventDialog;","\n\nconst AWS = (state = [], action) => {\n  switch (action.type) {\n\n    case 'SET_FILES': return action.payload;    \n\n    default: return state;\n  }\n};\n\nexport default AWS;","const usersReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_USERS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default usersReducer;\n","const editEventReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'SET_EDIT': return action.payload;\n        // case 'GET_EDIT_INFO': return action.payload;\n        default: return state;\n    }\n};\n\nexport default editEventReducer;","const attendeesReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ATTENDEES':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default attendeesReducer;","const Communities = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_COMMUNITIES': return action.payload;\n\n    default: return state;\n  }\n};\n\nexport default Communities;","import { combineReducers } from \"redux\";\nimport errors from \"./errorsReducer\";\nimport loginMode from \"./loginModeReducer\";\nimport user from \"./userReducer\";\nimport events from \"./Events.reducer\";\nimport tableEvents from './EventsTable.reducer';\nimport calendarEvents from './EventsCalendar.reducer';\nimport selectedEvent from \"./SelectedEvent.reducer\";\nimport contacts from \"./Contacts.reducer\";\nimport eventDialog from \"./EventDialog.reducer\";\nimport AWS from './awsFilesReducer';\nimport users from './usersReducer';\nimport editEvent from './editEventReducer';\nimport attendees from './attendeeReducer';\nimport communities from './Communities.reducer';\n\n\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, \t\t\t\t// contains registrationMessage and loginMessage\n  loginMode, \t\t\t// will have a value of 'login' or 'registration' to control which screen is shown\n  user, \t\t\t\t// will have an id and username if someone is logged in\n  events,\t\t\t\t// List of all the events on the calendar\n  selectedEvent,\t\t// The event we're viewing details of \n  contacts,     // Main contacts of a selected community\n  eventDialog,    // Is there an event dialog open?\n  AWS,\n  users,       //gets all users from db\n  editEvent,        // to edit info from dashboard\n  attendees, // List of all attendees who signed-up at an event\n  users,       //gets all users from db\n  communities,  \n  // tableEvents,    // event data formatted for the dashboard table\n  // calendarEvents, // event data formatted for the calendar\n\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest, takeEvery } from 'redux-saga/effects';\n\nfunction* fetchEvents(action) {\n\n  try {\n    const response = yield axios({\n      method: 'get',\n      url: 'api/events',\n      params: {communityId: action.payload},\n    });\n\n    yield put({ type: 'SET_EVENTS', payload: response.data });\n  } catch (error) {\n    console.log('Events get request failed', error);\n  }\n}\n\n\nfunction* addEvent(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    console.log('add event', action);\n\n    yield axios.post('api/events', action.payload, config);\n\n    // Refresh both the calendar and table event lists\n    yield put({ type: 'FETCH_EVENTS' });\n  }\n  \n  catch(error) {\n    console.log(`rut roh`, error);\n  }\n}\n\nfunction* editEvent(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n    console.log('edit event', action);\n    yield axios.put('api/events', action.payload, config);\n    // Refresh both the calendar and table event lists\n    yield put({ type: 'FETCH_CALENDAR_EVENTS' });\n    yield put({ type: 'FETCH_TABLE_EVENTS' });\n  }\n  catch (error) {\n    console.log(`rut roh`, error);\n  }\n}\n\nfunction* fetchContacts(action) {\n  try {\n    const response = yield axios.get(`api/events/contacts/${action.payload.communityID}`);\n    \n    yield put({ type: 'SET_CONTACTS', payload: response.data });\n  } catch (error) {\n    console.log('Contact get request failed', error);\n  }\n}\n\nfunction* eventSaga() {\n\n  yield takeLatest('FETCH_EVENTS', fetchEvents);\n  // yield takeLatest('FETCH_TABLE_EVENTS', fetchTableEvents);\n  yield takeEvery('ADD_EVENT', addEvent);\n  yield takeEvery('EDIT_EVENT', editEvent);\n  yield takeEvery('FETCH_CONTACTS', fetchContacts);\n}\n\nexport default eventSaga;\n","import axios from \"axios\";\nimport { put, takeLatest, takeEvery } from \"redux-saga/effects\";\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchFiles() {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true\n    };\n\n    const response = yield axios.get(\"api/files\", config);\n\n    console.log(response);\n\n    yield put({ type: \"SET_FILES\", payload: response.data });\n  } catch (error) {\n    console.log(\"Files get request failed\", error);\n  }\n}\n\nfunction* addFile(action) {\n  try {\n\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true\n    };\n\n    // posting to AWS\n    const formData = new FormData();\n    formData.append(\"file\", action.payload.file[0]);\n    const bucketResponse = yield axios.post(`/api/aws`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n\n    console.log(\"bucket response:\",bucketResponse);\n\n    // using the URL from aws, post to our database\n    yield axios.post('/api/files', {\n      title: action.payload.title,\n      description: action.payload.description,\n      url: bucketResponse.data.Location,\n      key: bucketResponse.data.key,\n    });\n\n    yield put({ type: \"FETCH_FILES\" });\n  } catch (error) {\n    console.log(\"its an error with adding file\", error);\n  }\n}\n\nfunction* deleteFile(action) {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true\n    };\n\n    console.log(\"delete event\", action);\n  \n    console.log(\"action.payload.key\", action.payload.key);\n    \n\n   yield axios({\n    method: \"DELETE\",\n    url: \"/api/aws\",\n    params: {\n      awsKey: action.payload.key\n    },\n\n    // TODO axios delete on /api/files\n    })  \n    yield axios ({\n     method: \"DELETE\",\n    url: \"/api/files\",\n    params: {\n      id: action.payload.id\n    }\n    \n  });\n\n    yield put({ type: \"FETCH_FILES\" });\n  } catch (error) {\n    console.log(`error`, error);\n  }\n}\n\nfunction* eventSaga() {\n  yield takeLatest(\"FETCH_FILES\", fetchFiles);\n  yield takeEvery(\"ADD_FILE\", addFile);\n  yield takeEvery(\"DELETE_FILE\", deleteFile);\n}\n\nexport default eventSaga;\n","import axios from 'axios';\nimport { put, takeLatest, takeEvery } from 'redux-saga/effects';\n\n\nfunction* fetchAttendees() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    const response = yield axios.get('api/attendees', config);\n\n    yield put({ type: 'SET_ATTENDEES', payload: response.data });\n  } catch (error) {\n    console.log('Attendess get request failed', error);\n  }\n}\n\nfunction* addAttendee(action) {\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n\n        console.log('add event', action);\n\n        // the config includes credentials which\n        // allow the server session to recognize the user\n        yield axios.post('api/attendee', action.payload, config);\n        yield put({ type: 'FETCH_ATTENDEES' });\n\n    }\n    catch (error) {\n        console.log(`Attendee post request failed`, error);\n    }\n}\n\n\nfunction* attendeeSaga() {\n    yield takeLatest('FETCH_ATTENDEES', fetchAttendees);\n    yield takeEvery('ADD_ATTENDEE', addAttendee);\n}\n\nexport default attendeeSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUsers() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user/all', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USERS', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* editUser(action ) {\n\n  console.log('edit user saga', action);\n\n  try {\n       yield axios.put(\"/api/user\", action.payload);\n       yield put({type:'FETCH_USERS'});\n  }\n  catch (error) {\n        console.log(\"Failed to edit user\", error);\n  }\n}\n\n\nfunction* deleteUser(action) {\n  console.log(\"delete user saga\", action);\n    try {\n        yield axios.delete(`/api/user/${action.payload}`);\n        yield put({ type: 'FETCH_USERS' });\n    } catch (error) {\n        console.log('error with delete ');\n    };\n};\n\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USERS', fetchUsers);\n  yield takeLatest('EDIT_USER', editUser);\n  yield takeLatest('DELETE_USER', deleteUser);\n\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest, takeEvery } from 'redux-saga/effects';\n\nfunction* fetchCommunities() {\n  try {\n\n    const response = yield axios.get('api/community');\n\n    yield put({ type: 'SET_COMMUNITIES', payload: response.data });\n  } catch (error) {\n    console.log('Events get request failed', error);\n  }\n}\n\nfunction* eventSaga() {\n  yield takeLatest('FETCH_COMMUNITIES', fetchCommunities);\n}\n\nexport default eventSaga;\n","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport eventSaga from './eventSaga';\nimport awsFilesSaga from './awsFilesSaga';\nimport attendeeSaga from './attendeeSaga';\nimport usersSaga from './usersSaga';\nimport communitiesSaga from './communitiesSaga';\n\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    eventSaga(),\n    awsFilesSaga(),\n    attendeeSaga(),\n    usersSaga(),\n    communitiesSaga(),\n\n  ]);\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './NavNew.css';\n\n\nclass NavNew extends Component {\n\n    state = {\n        eventDropdownDisplay: 'none',\n        communityDropdownDisplay: 'none',\n    }\n\n    toggleMenu = () => {\n        let mainNav = document.getElementById('js-menu');\n        mainNav.classList.toggle('active');\n    }\n\n    handleButtonDropdown = buttonName => () => {\n        buttonName === 'event' && this.state.eventDropdownDisplay === 'none' ?\n            this.setState({ eventDropdownDisplay: 'block' }) : this.setState({ eventDropdownDisplay: 'none' });\n    }\n\n    handleClose = () => {\n        console.log('handleCloseclicked')\n        this.setState({\n            eventDropdownDisplay: 'none',\n            communityDropdownDisplay: 'none',\n        })\n    }\n\n    checkOutsideCloseClick = () => {\n        if (this.props.dropDownDisplay === 'none') {\n            this.setState({\n                eventDropdownDisplay: 'none'\n            })\n        }\n    }\n\n\n    render() {\n        console.log('this.props.user:', this.props.user);\n        console.log('props dropdown display', this.props.dropDownDisplay)   \n        return (\n            <nav className=\"navbar\">          \n                <span className=\"navbar-toggle\" id=\"js-navbar-toggle\">\n                    <i className=\"fas fa-bars\" onClick={this.toggleMenu}></i>\n                </span>\n                <a href=\"/\" className=\"logo\"><img src=\"images/eim_logo_horizontal.png\" alt=\"End In Mind logo\" /></a>                \n                <ul className=\"main-nav\" id=\"js-menu\">\n\n                    {this.props.user.is_super_admin === true && (                     \n                        <li>\n                            <Link to=\"/dashboard\" className=\"nav-links\">Dashboard</Link>\n                        </li>\n                    )}\n                    {(this.props.user.is_super_admin === true || this.props.user.is_community_admin === true )&&(                                        \n                        <li>\n                            <Link to=\"/adminselect\" className=\"nav-links\">Users</Link>\n                        </li>                    \n                    )}\n\n                    {this.props.user.id && (\n                        <li className=\"dropdown\">\n                            <button onClick={this.handleButtonDropdown('event')} className=\"dropbtn\">Events\n                            <i className=\"fa fa-caret-down\"></i>\n                            </button>\n                            <div style={{ display: this.state.eventDropdownDisplay }} className=\"dropdown-content\">\n                                <Link to=\"/event/view\" onClick={this.handleClose}>View</Link>\n                                <Link to=\"/event/create\" onClick={this.handleClose} >Create</Link>\n                            </div>\n                        </li>\n                    )}\n\n                    {this.props.user.id && (\n                        <li>\n                            <Link to=\"/files\" className=\"nav-links\">Files</Link>\n                        </li>                      \n                    )} \n                      \n                    <li>\n                        <Link to=\"/calendar\" className=\"nav-links\">Calendar</Link>\n                    </li>\n                    {this.props.user.id ?  \n                    <li>\n                        <Link onClick={() => this.props.dispatch({ type: 'LOGOUT' })} className=\"nav-links\">Log Out</Link>\n                    </li> :\n                    <li>\n                        <Link to=\"/login\" className=\"nav-links\" onClick={() => {this.props.dispatch({ type: \"SET_TO_LOGIN_MODE\" });}}\n                        >Log In</Link>\n                    </li>\n                    }                \n                </ul>              \n            </nav>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    user: state.user,\n});\n\nexport default connect(mapStateToProps)(NavNew);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 8,\n    marginRight: 8,\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 10,\n  },\n  textField: {\n    marginTop: 4,\n    marginBottom: 10,\n  },\n  menu: {\n    width: 200,\n  },\n  button: {\n    margin: 0,\n    width: 120,\n    float: 'left',\n  },\n  icon: {\n    fontSize: 40,\n    verticalAlign: -8,\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  container: {\n    maxWidth: 500,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n\n});\n\n\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.history.push('/home')\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <div style={{ backgroundImage: `linear-gradient(rgba(212, 212, 212, 0.1), rgba(138, 138, 138, 0.1)), url(images/bloom-blooming-caffeine-768943.jpg)` }}\n        className=\"bckgrnd-container\">\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <div className={classes.root}>\n          <div className={classes.container}>\n            <Paper className={classes.root} elevation={1} style={{ marginTop: '40px' }}>\n              <Typography><h2 style={{ marginBottom: '10px', fontSize: '35px', color: '#4534e5' }}>Login</h2></Typography>\n              <ValidatorForm\n                ref=\"form\"\n                onSubmit={this.login}\n                onError={errors => console.log(errors)}\n              >\n                <Grid container spacing={8}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      id=\"username\"\n                      label=\"Username\"\n                      fullWidth\n                      className={classNames(classes.textField)}\n                      onChange={this.handleInputChangeFor('username')}\n                      name=\"eventTitle\"\n                      type=\"text\"\n                      margin=\"normal\"\n                      autoComplete=\"off\"\n                      value={this.state.username}\n                      validators={['required']}\n                      errorMessages={['this field is required']}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      id=\"standard-password-input\"\n                      label=\"Password\"\n                      className={classes.textField}\n                      type=\"password\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      autoComplete=\"off\"\n                      onChange={this.handleInputChangeFor('password')}\n                      fullWidth\n                    />\n                  </Grid>\n                </Grid>\n                <Button type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  className={classes.button}\n                  style={{ marginTop: '10px' }}>\n\n                  Login\n                                    </Button>\n                <Button type=\"button\"\n                  // variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  className={classes.button}\n                  style={{ marginTop: '10px', float: 'right' }}\n                  onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}>\n                  Register\n                                    </Button>\n              </ValidatorForm>\n            </Paper>\n          </div>\n        </div>\n\n        {/* Old Form */}\n        {/* <form className=\"login-form\" onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n          >\n            Register\n          </button>\n        </center> */}\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default withStyles(styles)(connect(mapStateToProps)(LoginPage));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\n\nclass SelectCommunity extends Component {\n\n  state = {\n    anchorEl: null,\n    community: {}\n  };\n\n  componentDidMount() {\n\t\t// get the community info\n\t\tthis.props.dispatch({type: \"FETCH_COMMUNITIES\"});\n  }\n\n  handleClick = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n\t};\n\t\n\thandleSelection = selection => event => {\n\t\tif (this.props.onSelect) this.props.onSelect(selection);\n\t\tthis.handleClose();\n\t}\n\n  render() {\n\n\t\tconst anchorEl = this.state.anchorEl;\n\n    return (\n      <div>\n        <Button onClick={this.handleClick} variant=\"outlined\" color=\"primary\" >Select Community</Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n        >\n\n\t\t\t\t{/* Map each community to its own menu option */}\n\t\t\t\t{ this.props.communities.map(community => \n          <MenuItem \n            key={community.id} \n            onClick={this.handleSelection(community.id)}>\n            {community.name}\n          </MenuItem>)}\n        </Menu>\n      </div>\n    );\n  }\n}\n\nconst reduxMap = reduxState => reduxState;\n\nexport default connect(reduxMap)(SelectCommunity);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport SelectCommunity from \"../SelectCommunity/SelectCommunity\";\n\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 8,\n    marginRight: 8,\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 10,\n  },\n  textField: {\n    marginTop: 4,\n    marginBottom: 10,\n  },\n  menu: {\n    width: 200,\n  },\n  button: {\n    margin: 0,\n    width: 120,\n    float: 'left',\n  },\n  icon: {\n    fontSize: 40,\n    verticalAlign: -8,\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  container: {\n    maxWidth: 500,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n\n});\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n    email: '',\n    community:'',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          email: this.state.email,\n          community: this.state.community,\n        },\n      });\n      console.log('register payload:',this.payload);\n      \n    } else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    \n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  \n\n\n  onCommunitySelection = selection => {\n    console.log('selected community ', selection)\n    this.setState({\n      community: selection,\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <div\n        style={{\n          backgroundImage: `linear-gradient(rgba(212, 212, 212, 0.1), rgba(138, 138, 138, 0.1)), url(images/bloom-blooming-caffeine-768943.jpg)`\n        }}\n        className=\"bckgrnd-container\"\n      >\n        {this.props.errors.registrationMessage && (\n          <h2 className=\"alert\" role=\"alert\">\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <div className={classes.root}>\n          <div className={classes.container}>\n            <Paper\n              className={classes.root}\n              elevation={1}\n              style={{ marginTop: \"40px\" }}\n            >\n              <Typography>\n                <h2\n                  style={{\n                    marginBottom: \"10px\",\n                    fontSize: \"35px\",\n                    color: \"#4534e5\"\n                  }}\n                >\n                  Register\n                </h2>\n              </Typography>\n              <ValidatorForm\n                ref=\"form\"\n                onSubmit={this.registerUser}\n                onError={errors => console.log(errors)}\n              >\n\n                <SelectCommunity  onSelect={this.onCommunitySelection}/>\n\n                <Grid container spacing={8}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      id=\"username\"\n                      label=\"Username\"\n                      fullWidth\n                      className={classNames(classes.textField)}\n                      onChange={this.handleInputChangeFor(\"username\")}\n                      name=\"eventTitle\"\n                      type=\"text\"\n                      margin=\"normal\"\n                      autoComplete=\"off\"\n                      value={this.state.username}\n                      validators={[\"required\"]}\n                      errorMessages={[\"this field is required\"]}\n                      variant=\"outlined\"\n                      style={{marginTop: \"15px\"}}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n                      id=\"standard-password-input\"\n                      label=\"Password\"\n                      className={classes.textField}\n                      type=\"password\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      autoComplete=\"off\"\n                      value={this.state.password}\n                      onChange={this.handleInputChangeFor(\"password\")}\n                      fullWidth\n                    />\n                    <TextField\n                      id=\"standard-email-input\"\n                      label=\"E-Mail\"\n                      className={classes.textField}\n                      type=\"email\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      autoComplete=\"off\"\n                      value={this.state.email}\n                      onChange={this.handleInputChangeFor(\"email\")}\n                      fullWidth\n                    />\n                  </Grid>\n                \n\n                  \n                </Grid>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  className={classes.button}\n                  style={{ marginTop: \"10px\" }}\n                >\n                  Register\n                </Button>\n                <Button\n                  type=\"button\"\n                  // variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  className={classes.button}\n                  style={{ marginTop: \"10px\", float: \"right\" }}\n                  onClick={() => {\n                    this.props.dispatch({ type: \"SET_TO_LOGIN_MODE\" });\n                  }}\n                >\n                  Back\n                </Button>\n              </ValidatorForm>\n            </Paper>\n          </div>\n        </div>\n\n        {/* Old Form */}\n        {/* <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"email\">\n              Email:\n              <input\n                type=\"email\"\n                name=\"Email\"\n                value={this.state.email}\n                onChange={this.handleInputChangeFor('email')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center> */}\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default withStyles(styles)(connect(mapStateToProps)(RegisterPage));\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport classNames from \"classnames\";\n\nconst styles = theme => ({\n  textField: {\n    marginTop: 2,\n    marginBottom: 2\n  },\n  menu: {\n    width: 200\n  },\n  button: {\n    margin: 0,\n    width: 120,\n    float: \"right\"\n  },\n  icon: {\n    fontSize: 20,\n    opacity: 0.9,\n    marginRight: theme.spacing.unit\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nclass FileDisplay extends Component {\n  state = {\n    title: \"\",\n    description: \"\",\n    file: null,\n    fileName: \"\",\n  };\n\n  handleSubmit = event => {\n\n    // Prevent the page from reloading\n    event.preventDefault();\n\n    // Dispatch an action to begin the upload saga\n    this.props.dispatch({\n      type: \"ADD_FILE\",\n      payload: this.state\n    });\n\n    // Clear the local state\n    this.setState({\n      title: \"\",\n      description: \"\",\n      file: null,\n      fileName: \"\",\n    });\n  };\n\n  buttonEnable = () => {\n    if (!this.state.fileName) {\n      return <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          disabled\n          // className={classes.button}\n        >\n          Submit\n        </Button>\n      } else {\n        return <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          // className={classes.button}\n        >\n          Submit\n        </Button>\n      }\n    }\n    \n\n  handleFileUpload = event => {\n    console.log(event.target.files[0].name)\n    this.setState({\n      file: event.target.files,\n      fileName: event.target.files[0].name\n    });\n\n  };\n\n  handleChangeFor = property => event => {\n    this.setState({\n      ...this.state,\n      [property]: event.target.value\n    });\n  };\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <div>\n      \n        <ValidatorForm\n          ref=\"form\"\n          onSubmit={this.handleSubmit}\n          onError={errors => console.log(errors)}\n        >\n          <Grid container spacing={8}>\n            <Grid item xs={12} sm={3}>\n              <TextValidator\n                id=\"title\"\n                label=\"Title\"\n                fullWidth\n                className={classNames(classes.textField)}\n                onChange={this.handleChangeFor(\"title\")}\n                name=\"title\"\n                type=\"text\"\n                margin=\"normal\"\n                value={this.state.title}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={3}>\n              <TextValidator\n                id=\"description\"\n                label=\"Description\"\n                fullWidth\n                className={classNames(classes.textField)}\n                onChange={this.handleChangeFor(\"description\")}\n                name=\"description\"\n                type=\"text\"\n                margin=\"normal\"\n                value={this.state.description}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={8} sm={3}>\n              <Button variant=\"contained\" component=\"label\" color=\"primary\">\n                Browse...\n                <input\n                  type=\"file\"\n                  style={{ display: \"none\" }}\n                  onChange={this.handleFileUpload}\n                />\n              </Button>\n              <p>{this.state.fileName}</p>\n            </Grid>\n            <Grid item xs={8} sm={3}>\n              {this.buttonEnable()}\n            </Grid>\n          </Grid>\n        </ValidatorForm>\n      </div>\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => {\n  return reduxState;\n};\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(FileDisplay));","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    fontSize: 14\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 8,\n    overflowX: \"auto\"\n  },\n  iconHover: {\n    \"&:hover\": {\n      color: theme.palette.primary.main\n    }\n  }\n});\n\nclass FileDisplay extends Component {\n  state = {\n    signedUrl: \"\"\n  };\n\n  componentDidMount() {\n    // for each file, get the signed URL\n    axios({\n      method: \"GET\",\n      url: \"/api/aws/signed-url\",\n      params: { key: this.props.myFile.key }\n    })\n      .then(response => {\n        console.log(\"got signed url\", response);\n        this.setState({\n          signedUrl: response.data.signedUrl\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  handleDeleteClick = () => {\n    \n    this.props.dispatch({\n      type: \"DELETE_FILE\",\n      payload: {\n          key: this.props.myFile.key, \n          id: this.props.myFile.id,\n      }\n    });\n\n    return;\n  };\n\n  render() {\n\n    const { classes } = this.props;\n\n    const file = this.props.myFile;\n    return (\n      <TableRow key={file.id}>\n        <CustomTableCell component=\"th\" scope=\"row\">\n          {file.title}\n        </CustomTableCell>\n        <CustomTableCell component=\"th\" scope=\"row\">\n          {file.description}\n        </CustomTableCell>\n        <CustomTableCell component=\"th\" scope=\"row\">\n          <a href={this.state.signedUrl}>\n            <i className=\"fas fa-file-alt fa-lg\" />\n          </a>\n        </CustomTableCell>\n\n        {this.props.deleteAccess &&\n          <CustomTableCell style={{ width: \"10%\" }} align=\"right\">\n            <IconButton\n              className={classes.iconHover}\n              onClick={this.handleDeleteClick}\n              aria-label=\"Delete\"\n            >\n              <DeleteIcon />\n            </IconButton>\n          </CustomTableCell>\n        }\n      </TableRow>\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => {\n  return reduxState;\n};\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(FileDisplay));","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SingleFile from \"./SingleFile\";\n\n\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    fontSize: 14\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 8,\n    overflowX: \"auto\"\n  },\n  iconHover: {\n    \"&:hover\": {\n      color: theme.palette.primary.main\n    }\n  }\n});\n\nclass FileDisplay extends Component {\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_FILES\" });\n  }\n\n\n  render() {\n\n    const { classes } = this.props;\n    const hasDeleteAccess = this.props.user.is_super_admin;\n\n    console.log('user is super admin:', hasDeleteAccess)\n\n    return (\n\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <CustomTableCell>Title</CustomTableCell>\n              <CustomTableCell>Description</CustomTableCell>\n              <CustomTableCell>Download</CustomTableCell>\n              {hasDeleteAccess && \n                <CustomTableCell align=\"right\" /> // this is the 'delete' column\n              }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {\n              this.props.AWS.map((file, index) => (\n              <SingleFile \n                key={file.id} \n                myFile={file}\n                deleteAccess={hasDeleteAccess}/>))\n            }\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => {\n  return reduxState;\n};\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(FileDisplay));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport UploadForm from \"./UploadForm\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport FileDisplay from \"./FileDisplay\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 5,\n    marginRight: 5,\n    marginTop: 40\n  },\n  container: {\n    maxWidth: 700,\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  }\n});\n\nclass FileUpload extends Component {\n\n  render() {\n\n     const { classes } = this.props;\n\n    return (\n      <div>\n        <div className={classes.root}>\n        <div className={classes.container}>\n        <UploadForm />\n        <FileDisplay />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => {\n  return reduxState;\n};\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(FileUpload));\n\n\n   ","import React, { Component } from \"react\";\nimport Calendar from \"react-big-calendar\";\nimport moment from \"moment\";\n\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { connect } from 'react-redux';\n\nCalendar.setLocalizer(Calendar.momentLocalizer(moment));\n\nclass CalendarView extends Component {\n\n  componentDidMount() {\n    // Dispatch a saga to get all the events from the server\n    this.props.dispatch({type:'FETCH_EVENTS'});\n  }\n\n \n\n\n  eventSelected = event => {\n    this.props.dispatch({type:\"SET_EVENT\", payload: event});\n    this.props.dispatch({type:\"EVENT_DIALOG\", payload: true});\n  }\n\n  calendarStyle = {\n    height: \"80vmin\",\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n\n        <Calendar\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          views={['month']}\n          events={this.props.events}\n          onSelectEvent={this.eventSelected}\n          onEventDrop={this.onEventDrop}\n          style={this.calendarStyle}\n        />\n      </div>\n    );\n  }\n}\n\nconst reduxMap = reduxState => {\n  return reduxState;\n}\n\nexport default connect(reduxMap)(CalendarView);","import React, { Component } from \"react\";\nimport Paper from '@material-ui/core/Paper';\n\nclass SingleContact extends Component {\n\n  render() {\n\n\t\tconst contact = this.props.contact;\n    return (\n      <Paper className=\"single-contact\">\n        <div><b>{contact.full_name}</b></div>\n        <div>{contact.email}</div>\n        <div>{contact.phone_number}</div>\n      </Paper>\n    );\n  }\n}\n\n\nexport default SingleContact;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport SingleContact from \"./SingleContact\";\nimport './Contacts.css';\n\n\nclass Contacts extends Component {\n\n  render() {\n    return (\n      <div className=\"contact-space\">\n        <h3>Contact Info</h3>\n        {\n          this.props.contacts.map(contact => \n          <SingleContact contact={contact} />)\n        }\n      </div>\n    );\n  }\n}\n\nconst reduxMap = reduxState => {\n  return reduxState;\n};\n\nexport default connect(reduxMap)(Contacts);\n","let options = {\n\tweekday: \"long\",\n\tmonth: \"long\",\n\tday: \"numeric\",\n};\n  \n/** Takes in a raw date string and returns a nicely formatted date string. */\nfunction renderDate(dateString) {\n\tif (dateString === null || dateString === \"\") {\n\t\treturn \"\";\n\t}\n\n\tlet newDate = new Date(dateString);\n\treturn newDate.toLocaleDateString(\"en-US\", options);\n}\n\nexport default renderDate;","let options = {\n\thour: 'numeric',\n\tminute: 'numeric',\n};\n  \n/** Takes in a raw date string and returns a nicely formatted date string. */\nfunction renderDate(dateString) {\n\tif (dateString === null || dateString === \"\") {\n\t\treturn \"\";\n\t}\n\n\tlet newDate = new Date(dateString);\n\treturn newDate.toLocaleDateString(\"en-US\", options).split(',')[1];\n}\n\nexport default renderDate;","let options = {\n\tmonth: \"long\",\n\tyear: \"numeric\",\n};\n  \n/** Takes in a raw date string and returns a nicely formatted date string. */\nfunction renderDate(dateString) {\n\tif (dateString === null || dateString === \"\") {\n\t\treturn \"\";\n\t}\n\n\tlet newDate = new Date(dateString);\n\treturn newDate.toLocaleDateString(\"en-US\", options);\n}\n\nexport default renderDate;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport niceDay from '../../niceBirthday';\n\nconst styles = theme => ({\n\n  table: {\n    minWidth: 500,\n  },\n});\n\n\nclass AttendeeTable extends Component {\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n        <Table className={classes.table}>\n\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Phone</TableCell>\n              <TableCell>Date of Birth</TableCell>\n              <TableCell>Gender</TableCell>\n              <TableCell>Household Income</TableCell>\n              <TableCell>Race/Ethnicity</TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {\n              this.props.attendees.map(guy => (\n                <TableRow>\n                  <TableCell>{guy.first_name} {guy.last_name}</TableCell>\n                  <TableCell>{guy.email}</TableCell>\n                  <TableCell>{guy.phone}</TableCell>\n                  <TableCell>{niceDay(new Date(guy.dob))}</TableCell>\n                  <TableCell>{guy.sex}</TableCell>\n                  <TableCell>{guy.household_income}</TableCell>\n                  <TableCell>{guy.race}</TableCell>\n                </TableRow>\n              )\n              )\n            }\n          </TableBody>\n          \n        </Table>\n    );\n  }\n}\n\nAttendeeTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\n\nexport default withStyles(styles)(connect()(AttendeeTable));\n","import React, { Component } from \"react\";\nimport './EventCard.css';\nimport {connect} from 'react-redux';\nimport niceDay from '../../niceDay';\nimport niceTime from '../../niceTime';\nimport AttendeeTable from \"../AttendeeTable/AttendeeTable\";\n\n\nclass EventCard extends Component {\n\n  render() {\n\t\tconst myEvent = this.props.reduxState.selectedEvent;\n\n    return (\n\t\t\t<div className=\"event-card\">\n\t\t\t\t{  (\n\t\t\t\t\t<div>\t\t\t\t\t\t\n\t\t\t\t\t\t<h1>{myEvent.title}</h1>\n\t\t\t\t\t\t<h4>Description</h4>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<p>{myEvent.description}</p>\n\t\t\t\t\t\t< br />\n\t\t\t\t\t\t<div className=\"schedule\">\n\t\t\t\t\t\t\t<p><b>{niceDay(myEvent.start)}</b></p>\n\t\t\t\t\t\t\t<div className=\"date-range\">\n\t\t\t\t\t\t\t\t{myEvent.start && <p>{niceTime(myEvent.start)}</p>}\n\t\t\t\t\t\t\t\t<div>to</div>\n\t\t\t\t\t\t\t\t{myEvent.end && <p>{niceTime(myEvent.end)}</p>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"event-contact\">\n\t\t\t\t\t\t\t<h4>Event Contact</h4>\n\t\t\t\t\t\t\t<p>{myEvent.contact_name}</p>\n\t\t\t\t\t\t\t<p>{myEvent.contact_email}</p>\n\t\t\t\t\t\t\t<p>{myEvent.contact_phone}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{this.props.showAll && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h3>Attendees</h3>\n\t\t\t\t\t\t\t\t<AttendeeTable \n\t\t\t\t\t\t\t\t\tevent={myEvent} \n\t\t\t\t\t\t\t\t\tattendees={this.props.reduxState.attendees}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n  }\n}\n\nconst reduxMap = reduxState => {\n  return {...this.props, reduxState}\n}\n\nexport default connect(reduxMap)(EventCard);\n","import React, { Component } from \"react\";\nimport './CalendarLanding.css';\nimport Calendar from \"../Calendar/Calendar\";\nimport Contacts from \"../Contacts/Contacts\";\nimport { connect } from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport EventCard from \"../EventCard/EventCard\";\nimport SelectCommunity from \"../SelectCommunity/SelectCommunity\";\n\n\nclass CalendarLanding extends Component {\n\n\tstate = {\n\t\tcommunityId: null,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.dispatch({type: \"FETCH_COMMUNITIES\"});\n\t}\n\n\n\thandleClose = () => {\n\t\tthis.props.dispatch({type: \"EVENT_DIALOG\", payload: false})\n\t\tthis.props.dispatch({ type: 'CLEAR_EVENT' });\n\t}\n\n\thandleCommunitySelected = selection => {\n\t\tconsole.log('you selected community ', selection);\n\t\tthis.setState({communityId: selection});\n\n\t\t// fetch events for the community\n\t\tthis.props.dispatch({type:'FETCH_EVENTS', payload: selection});\n\n\t\t// Fetch the contacts for the community\n\t\tthis.props.dispatch({ type: \"FETCH_CONTACTS\", payload: { communityID: selection }});\n\t}\n\n\tcommunityName = () => {\n\n\t\t// If we have a community ID, just return the name of the community of that ID.\n\t\tfor (const community of this.props.communities) {\n\t\t\tif (community.id === this.state.communityId) return community.name;\n\t\t}\n\n\t\treturn \"All Events\";\n\t}\n\n  render() {\n    return (\n\t\t\t<div className=\"calendar-parent\">\n\t\t\t\t<div className=\"calendar-header\">\n\t\t\t\t\t<SelectCommunity onSelect={this.handleCommunitySelected}/>\n\t\t\t\t\t<h1>{this.communityName()}</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"calendar-landing\">\n\t\t\t\t\t<div className=\"calendar-space\">\n\t\t\t\t\t\t<Calendar />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Contacts communityId={this.state.communityId}/>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<Dialog\n\t\t\t\t\tonClose={this.handleClose}\n\t\t\t\t\topen={this.props.eventDialog}\n\t\t\t\t>\n\t\t\t\t\t<EventCard />\n\t\t\t\t</Dialog>\n\t\t\t</div>\n\t\t);\n  }\n}\n\nconst reduxMap = reduxState => reduxState;\n\nexport default connect(reduxMap)(CalendarLanding);\n","import React, { Component } from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { connect } from 'react-redux';\n\nclass AdminSelectRow extends Component {\n\n\tonDelete = () => {\n\n\t\tif (window.confirm(\"Are you sure you want to remove \" + this.props.user.username + \"?\")) {\n\n\t\t\tthis.props.dispatch({\n\t\t\t\ttype: \"DELETE_USER\",\n\t\t\t\tpayload: this.props.user.id,\n\t\t\t});\n\t\t}\n};\n\nsetPropertyOf = (user, property, value) => (event) => {\n\n\tthis.props.dispatch({\n\t\ttype: \"EDIT_USER\",\n\t\tpayload: { user, property, value: value }\n\t});\n}\n\ncomponentDidMount() {\n\tconsole.log(this.props);\n}\n\n  render() {\n\n\t\tconst user = this.props.user;\n\n    return (\n      <TableRow>\n        <TableCell> {user.username} </TableCell>\n        <TableCell>{user.email}</TableCell>\n        <TableCell>{user.first_name} {user.last_name}</TableCell>\n\t\t\t\t\n\t\t\t\t{this.props.isSuperAdmin() &&\n\t\t\t\t\t(<TableCell>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={user.is_super_admin}\n\t\t\t\t\t\t\tvalue={user.is_super_admin}\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonChange={this.setPropertyOf(\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\"is_super_admin\",\n\t\t\t\t\t\t\t\t!user.is_super_admin\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TableCell>)\n\t\t\t\t}\n\n\t\t\t\t{(this.props.isSuperAdmin() || this.props.isAdmin()) &&\n\t\t\t\t\t(<TableCell>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={user.is_community_admin}\n\t\t\t\t\t\t\tvalue={user.is_community_admin}\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonChange={this.setPropertyOf(\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\"is_community_admin\",\n\t\t\t\t\t\t\t\t!user.is_community_admin\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TableCell>)\n\t\t\t\t}\n\n        <TableCell>{user.community_name}</TableCell>\n\n\t\t\t\t{this.props.isAdmin() && \n\t\t\t\t(<TableCell>\n          {user.approved ? (\n            \"Approved\"\n          ) : (\n            <Button onClick={this.setPropertyOf(user, \"approved\", true)}>\n              Confirm\n            </Button>\n          )}\n        </TableCell>\n\t\t\t\t)}\n\n\t\t\t\t{this.props.isAdmin() && \n        (<TableCell>\n          <Button\n            onClick={this.onDelete}\n            className=\"deleteButton\"\n          >\n            Delete\n          </Button>\n\t\t\t\t</TableCell>)\n\t\t\t\t}\n\n      </TableRow>\n    );\n  }\n}\n\nexport default connect()(AdminSelectRow);\n","import React, { Component } from \"react\";\nimport './AdminSelect.css'\nimport { connect } from 'react-redux';\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AdminSelectRow from \"./AdminSelectRow\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n  root: {\n    width: '96%',\n    maxWidth: '1400px',\n    marginTop: theme.spacing.unit * 3,\n    margin: '12px auto',\n    overflowX: 'auto',\n  },\n});\n\n\nclass AdminSelect extends Component {\n\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USERS' })\n  }\n\n  userIsSuperAdmin = () => {\n\n    if (!this.props.user) return false;\n    return this.props.user.is_super_admin;\n  }\n\n  userIsAdmin = () => {\n    if (!this.props.user) return false;\n    return this.props.user.is_super_admin || this.props.user.is_community_admin;\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <Paper className={classes.root}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>User</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Full Name</TableCell>\n\n              {this.userIsSuperAdmin() && \n                <TableCell>Super Admin</TableCell>\n              }\n\n              {(this.userIsSuperAdmin() || this.userIsAdmin())&& \n                <TableCell>Community Admin</TableCell>\n              }\n\n              { this.userIsAdmin() && \n                <TableCell>Community</TableCell>\n              }\n\n              <TableCell>Approved</TableCell>\n              { this.userIsAdmin() && \n                <TableCell>Delete</TableCell>\n              }\n\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.props.users.map( user => \n              <AdminSelectRow \n                key={user.id} \n                user={user} \n                isAdmin={this.userIsAdmin} \n                isSuperAdmin={this.userIsSuperAdmin}/>\n            )}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\n\nexport default withStyles(styles)(connect(mapStateToProps)(AdminSelect));","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\nimport niceDay from '../../niceDay';\nimport axios from 'axios';\n\nclass EventRow extends Component {\n\n  state = {\n    attendees: [],\n  }\n\n  handleViewDetails = () => {\n\n    // dispatch to set this event's attendees to the redux state,\n    // so they can be displayed in more detail for another component.\n    this.props.dispatch({type: 'SET_ATTENDEES', payload: this.state.attendees});\n\n    // delegate event selection to a function from the props, so a \n    // parent component can run functionality using this row's props.\n    this.props.eventSelected(this.props.row);\n  };\n\n  componentDidMount() {\n\n    // Fetch the communities so we can show the correct community\n    // name for each event.\n    this.props.dispatch({type: 'FETCH_COMMUNITIES'});\n\n    // fetch attendees for this event\n    axios({\n      method: 'get',\n      url:'/api/attendee/for-event',\n      params: {id: this.props.row.id},\n    })\n\n    .then (response => {\n        this.setState({attendees: response.data});\n    })\n  }\n\n  communityName = () => {\n    for (let community of this.props.communities) {\n      if (community.id == this.props.row.community_id) {\n        return community.name;\n      }\n    }\n\n    return 'N/A'\n  }\n\n  render() {\n\n    const event = this.props.row;\n\n    return (\n      <TableRow>\n\n        <TableCell>\n          {event.title}\n        </TableCell>\n\n        <TableCell>\n          {niceDay(event.end_time)}\n        </TableCell>\n\n        <TableCell >{this.communityName()}</TableCell>\n\n        <TableCell >{this.state.attendees.length}</TableCell>\n\n        <TableCell>\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            onClick={this.handleViewDetails}\n          >\n            View Details\n          </Button>\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n\nEventRow.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst reduxMap = reduxState => {\n  return reduxState;\n};\n\nexport default connect(reduxMap)(EventRow);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport EventRow from \"../EventRow/EventRow\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport EventCard from \"../EventCard/EventCard\";\nimport PrintIcon from '@material-ui/icons/Print';\nimport Button from '@material-ui/core/Button';\nimport './Dashboard.css';\n\nconst styles = theme => ({\n  root: {\n    width: '96%',\n    marginTop: theme.spacing.unit * 3,\n    margin: '12px auto',\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 500,\n  },\n});\n\n\nclass Dashboard extends Component {\n\n  state = {\n    // When viewing details of an event, its info will be here\n    fullEvent: null,\n  }\n\n  handlePrint = () => {\n    console.log('print this');\n    window.print();\n  }//end print, print this page\n\n  handleClose = () => {\n\n    // Clear the event after the panel has time to fade out\n    setTimeout(() => {\n      this.props.dispatch({type: 'CLEAR_EVENT'});\n    }, 500);\n    \n    this.setState({ fullEvent: null});\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_EVENTS\" });\n  }\n\n  // Called when the 'view details' button is clicked for an event.\n  onViewDetails = event => {\n\n    this.props.dispatch({type: 'SET_EVENT', payload: event});\n\n    console.log('viewing details for event ', event);\n    this.setState({\n      fullEvent: event\n    });\n\n  }\n\n  // TODO dialog with event details\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <p className=\"dashboardPrintClass\"><Button variant=\"contained\" color=\"primary\" onClick={this.handlePrint} >\n          Print <PrintIcon /></Button></p>\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Community</TableCell>\n              <TableCell>Attendees</TableCell>\n              <TableCell>View details</TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {\n              this.props.events.map(row => \n                <EventRow row={row} key={row.event_id} eventSelected={this.onViewDetails}/>\n              )\n            }\n          </TableBody>\n          \n        </Table>\n      </Paper>\n      <Dialog\n        fullWidth={true}\n        maxWidth='lg'\n        open={this.state.fullEvent != null}\n        onClose={this.handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <EventCard showAll={true}/>\n      </Dialog>\n\n      </div>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst reduxMap = reduxState => {\n  return reduxState;\n};\n\nexport default withStyles(styles)(connect(reduxMap)(Dashboard));\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport dateConvert from '../../niceDay';\nimport timeConvert from '../../niceTime';\n\n\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginLeft: 8,\n        marginRight: 8,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 4,\n        paddingBottom: theme.spacing.unit * 4,\n    },\n    card: {\n        // maxWidth: 345,\n    },\n    media: {\n        height: 140,\n    },\n});\n\nclass EventView extends Component {\n\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_EVENTS' })\n        this.props.dispatch({ type: 'FETCH_COMMUNITIES'})\n    };\n\n    handleRunEvent = event => () => {\n        console.log('runevent clicked', event);\n        this.props.dispatch({ type: 'SET_EVENT', payload: event})\n        this.props.history.push('/event/signup');\n    }\n\n    handleEditEvent = event => () => {\n        console.log('editevent clicked', event);\n        this.props.dispatch({ type: 'SET_EVENT', payload: event })\n        this.props.history.push('/event/create');\n    }\n\n    communityNameDisplay = () => {\n        let currentCommunity = this.props.communities.filter(community => \n            community.id === this.props.user.community_id\n            );\n\n        if (currentCommunity.length < 1) return 'Community';\n\n        console.log(currentCommunity);\n        return currentCommunity[0].name;\n    }\n\n\n    render() {\n        console.log('this.props.eventReducer:', this.props.events);\n        console.log('community', this.props.communities)\n        \n        const { classes } = this.props;\n        return (\n            <div className={classes.root}>\n                <h2 style={{ marginBottom: '20px' }}>{this.communityNameDisplay()} Events</h2>\n                <Grid container spacing={16}>\n                    {this.props.events.filter(event => event.community_id === this.props.user.community_id || this.props.user.is_super_admin).map((eventItem) => {\n                        return (\n                            <Grid item xs={12} md={3} sm={4}>\n                                <Card className={classes.card}>\n                                    <CardMedia\n                                        className={classes.media}\n                                        image=\"images/bloom-blooming-caffeine-768943.jpg\"\n                                        title=\"Contemplative Reptile\"\n                                        style={{ boxShadow: '0 2px 2px #efefef'}}\n                                />\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{ marginBottom: '0px' }}>\n                                            {eventItem.event_name}\n                                        </Typography>\n                                        <Typography component=\"p\" style={{ marginBottom:'10px'}}>\n                                            {eventItem.description}\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{ fontSize: '15px', marginBottom: '0', marginTop: '8px' }}>\n                                            Location and Time\n                                                </Typography>\n                                        <Typography gutterBottom component=\"p\" style={{ fontSize: '13px', marginBottom: '0' }}>\n                                            {eventItem.location}\n                                        </Typography>\n                                        <Typography gutterBottom component=\"p\" style={{ fontSize: '13px', marginBottom: '0' }}>\n                                            {dateConvert(eventItem.start)} {timeConvert(eventItem.start)}-{timeConvert(eventItem.end)} \n                                        </Typography>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{ fontSize: '15px', marginBottom: '0', marginTop: '8px' }}>\n                                            Event Organizer\n                                                </Typography>\n                                        <Typography gutterBottom component=\"p\" style={{ fontSize: '13px', marginBottom: '0' }}>\n                                            {eventItem.contact_name}\n                                        </Typography>\n                                        <Typography gutterBottom component=\"p\" style={{ fontSize: '13px' }}>\n                                            {eventItem.contact_email} / {eventItem.contact_phone}\n                                        </Typography>\n\n                                    </CardContent>\n                                    <CardActions>\n                                        <Button size=\"small\" color=\"primary\" onClick={this.handleEditEvent(eventItem)}>\n                                            Edit Event\n                                        </Button>\n                                        <Button size=\"small\" color=\"primary\" onClick={this.handleRunEvent(eventItem)}>\n                                            Run Event\n                                        </Button>\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        )\n                    }\n                    )}\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst reduxMap = reduxState => {\n    return reduxState;\n}\n\nexport default withStyles(styles)(connect(reduxMap)(EventView));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n// import Snackbar from '@material-ui/core/Snackbar';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\n// import CheckCircleIcon from '@material-ui/icons/CheckCircle';\n// import ErrorIcon from '@material-ui/icons/Error';\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from 'material-ui-pickers';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classNames from 'classnames';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport EventIcon from '@material-ui/icons/Event';\nimport TimeIcon from '@material-ui/icons/AccessTime';\nimport Paper from '@material-ui/core/Paper';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Typography } from '@material-ui/core';\nimport { getTime } from 'date-fns/esm';\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginLeft: 8,\n        marginRight: 8,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 4,\n        paddingBottom: theme.spacing.unit * 4,\n    },\n    textField: {\n        marginTop: 4,\n        marginBottom: 10,\n    },\n    menu: {\n        width: 200,\n    },\n    button: {\n        margin: 0,\n        marginTop: 10,\n        width: 120,\n        float: 'right',\n    },\n    icon: {\n        fontSize: 40,\n        verticalAlign: -8,\n        opacity: 0.9,\n        marginRight: theme.spacing.unit,\n    },\n    typography: {\n        useNextVariants: true,\n    },\n    container: {\n        maxWidth: 800,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n\n});\n\nconst audienceDropdown = ['0-10', '10-20', '20-30', '50-100', '100-200', '200+'];\n\nclass EventCreateForm extends Component {\n\n    state = {\n        eventId: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.id,\n        eventHeading: !this.props.selectedEvent.id ? 'Create New Event' : 'Edit Event',\n        // authorUserId: this.props.user.id,\n        // communityId: this.props.user.community_id,\n        eventTitle: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.event_name,\n        description: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.description,\n        selectedDate: !this.props.selectedEvent.id ? new Date() : this.props.selectedEvent.start_time,\n        start_time: !this.props.selectedEvent.id ? new Date() : this.props.selectedEvent.start_time,\n        end_time: !this.props.selectedEvent.id ? new Date() : this.props.selectedEvent.end_time,\n        location: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.location,\n        contactName: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.contact_name,\n        contactEmail: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.contact_email,\n        contactPhone: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.contact_phone,\n        audienceSize: !this.props.selectedEvent.id ? '' : this.props.selectedEvent.expected_attendees,\n        eventTypeArray: '',\n        eventTypes: {\n            popUpPodcast: false,\n            endInMindClub: false,\n            deathOverDinner: false,\n            honoringTraining: false,\n            stevieRay: false,\n            deathCafe: false,\n            livingWills: false,\n            tedTalks: false,\n            writingParty: false,\n            healthStory: false,\n        },\n    }\n\n    componentDidMount = () => {\n        // this.props.dispatch({ type: 'CLEAR_EVENT' });\n        console.log('this.props.editEvent ID:', this.props.editEvent);\n       if(this.props.editEvent){\n           console.log('editEvent ID exist in IF Statement:', this.props.editEvent);\n        //    this.props.dispatch({ type: 'GET_EDIT_INFO', payload: this.props.row.id });\n       }\n    }\n\n    componentWillUnmount = () => {\n        this.props.dispatch({ type: 'CLEAR_EVENT' })\n    }\n\n\n\n    // handles on inputs on form and sets state\n    handleChange = (property) => (event) => {\n        this.setState({\n            ...this.state,\n            [property]: event.target.value\n        });\n    }\n\n    getEventTypes = () => {\n        let eventTypes = [];\n\n        console.log('event types:', this.state.eventTypes);\n\n        Object.entries(this.state.eventTypes).forEach(entry => {\n            if (entry[1]) eventTypes.push(entry[0]);\n        });\n        this.setState({\n            eventTypeArray: [...this.state.eventTypeArray, eventTypes]\n        })\n    }\n\n    // handles form submit button, sends post dispatch to redux with payload of all selected form inputs + clears form \n    handleSubmit = () => {\n        this.getEventTypes();\n        !this.props.selectedEvent.id ? this.props.dispatch({ type: 'ADD_EVENT', payload: this.state }) : this.props.dispatch({ type: 'EDIT_EVENT', payload: this.state });\n        this.setState({\n            eventId: '',\n            eventTitle: '',\n            description: '',\n            selectedDate: new Date(),\n            start_time: new Date(),\n            end_time: new Date(),\n            location: '',\n            contactName: '',\n            contactEmail: '',\n            contactPhone: '',\n            audienceSize: '',\n            eventTypeArray: '',\n            eventTypes: {\n                popUpPodcast: false,\n                endInMindClub: false,\n                deathOverDinner: false,\n                honoringTraining: false,\n                stevieRay: false,\n                deathCafe: false,\n                livingWills: false,\n                tedTalks: false,\n                writingParty: false,\n                healthStory: false,\n            },\n        });\n\n        !this.props.selectedEvent.id ? alert('Your event has been created!') : alert('Your event has been edited!');\n        this.props.history.push('/event/view');\n    }\n\n    // handles date/time selection for date, starttime, endtime\n    handleDateChange = propName => event => {\n        \n        this.setState({\n            ...this.state,\n            [propName]: event,\n        });\n    };\n    \n\n    handleEventTypeChange = name => event => {\n        this.setState({\n            eventTypes: {\n                ...this.state.eventTypes,\n                [name]: event.target.checked\n            }\n        });\n    };\n\n    handleCancelEdit = () => {\n        this.props.dispatch({ type: 'CLEAR_EVENT' });\n        this.setState({\n            eventTitle: '',\n            description: '',\n            selectedDate: new Date(),\n            start_time: new Date(),\n            end_time: new Date(),\n            location: '',\n            contactName: '',\n            contactEmail: '',\n            contactPhone: '',\n            audienceSize: '',\n            eventTypeArray: '',\n            eventTypes: {\n                popUpPodcast: false,\n                endInMindClub: false,\n                deathOverDinner: false,\n                honoringTraining: false,\n                stevieRay: false,\n                deathCafe: false,\n                livingWills: false,\n                tedTalks: false,\n                writingParty: false,\n                healthStory: false,\n            },\n        });\n        this.props.history.push('/event/view');\n    }\n\n    // handleCancelEdit = () => {\n    //     if(this.props.selectedEvent.id) {\n    //         return <Grid item xs={8} sm={10}>\n    //             <Button\n    //                 type=\"submit\"\n    //                 onClick={this.handleCancelEdit}\n    //                 variant=\"contained\"\n    //                 color=\"primary\"\n    //                 size=\"large\"\n    //                 float=\"left\"\n    //                 className={classes.button}>\n    //                 Cancel\n    //                 </Button>\n    //         </Grid>\n\n    //     }\n    // }\n\n\n    // determines which message will display on snackbar depending if post to database was successful  \n    // alertMessage = () => {\n    //     const { classes } = this.props;\n    //     if (this.props.confirmPost.status) {\n    //         return <span id=\"message-id\" style={{ display: 'flex', alignItems: 'center' }}>\n    //             <CheckCircleIcon className={classes.icon} />Project Successfully Added!</span>\n    //     }\n    //     else {\n    //         return <span id=\"message-id\" style={{ display: 'flex', alignItems: 'center' }}>\n    //             <ErrorIcon className={classes.icon} />Project add was unsuccessful</span>\n    //     }\n    // }\n\n    // handles close from snackbar and sends reset dispatch to redux  \n    // handleClose = () => {\n    //     this.props.dispatch({ type: 'RESET_POST' })\n    // };\n\n\n    render() {\n        const { classes } = this.props;\n        // console.log(this.state.eventTypeArray);\n        // console.log('user id', this.props.user.community_id);\n        console.log('selected event id', this.props.selectedEvent)\n        \n\n        return (\n            <div style={{ backgroundImage: `linear-gradient(rgba(212, 212, 212, 0.1), rgba(138, 138, 138, 0.1)), url(images/bloom-blooming-caffeine-768943.jpg)` }}\n                className=\"bckgrnd-container\">\n                <div className={classes.root}>\n                    <div className={classes.container}>\n                        <Paper className={classes.root} elevation={1} style={{ marginTop: '40px' }}>\n                            <Typography><h2 style={{ marginBottom: '10px', fontSize: '35px', color: '#4534e5' }}><EventIcon className={classes.icon} />\n                            {this.state.eventHeading}</h2>\n                            </Typography>\n                            <ValidatorForm\n                                ref=\"form\"\n                                onSubmit={this.handleSubmit}\n                                onError={errors => console.log(errors)}\n                            >\n                                <Grid container spacing={8}>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextValidator\n                                            id=\"eventTitle\"\n                                            label=\"* Event Title\"\n                                            fullWidth\n                                            className={classNames(classes.textField)}\n                                            onChange={this.handleChange('eventTitle')}\n                                            name=\"eventTitle\"\n                                            type=\"text\"\n                                            margin=\"normal\"\n                                            value={this.state.eventTitle}\n                                            validators={['required']}\n                                            errorMessages={['this field is required']}\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={8}>\n                                        <TextValidator\n                                            id=\"description\"\n                                            label=\"Description\"\n                                            multiline\n                                            fullWidth\n                                            rowsMax=\"4\"\n                                            type=\"text\"\n                                            value={this.state.description}\n                                            onChange={this.handleChange('description')}\n                                            className={classes.textField}\n                                            // validators={['required']}\n                                            // errorMessages={['this field is required']}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} style={{ marginBottom: '8px' }}>\n                                        <FormLabel component=\"legend\" style={{ color: '#000', marginTop: '8px' }}>* Event Type</FormLabel>\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.popUpPodcast}\n                                                    onChange={this.handleEventTypeChange('popUpPodcast')}\n                                                    color=\"primary\"\n                                                    value=\"Pop-up Podcasts\"\n                                                />\n                                            }\n                                            label=\"Pop-up Podcasts\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.endInMindClub}\n                                                    onChange={this.handleEventTypeChange('endInMindClub')}\n                                                    color=\"primary\"\n                                                    value=\"End in Mind Book Club\"\n                                                />\n                                            }\n                                            label=\"End in Mind Book Club\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.deathOverDinner}\n                                                    onChange={this.handleEventTypeChange('deathOverDinner')}\n                                                    color=\"primary\"\n                                                    value=\"Death Over Dinner\"\n                                                />\n                                            }\n                                            label=\"Death Over Dinner\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.honoringTraining}\n                                                    onChange={this.handleEventTypeChange('honoringTraining')}\n                                                    color=\"primary\"\n                                                    value=\"Honoring Choices Training\"\n                                                />\n                                            }\n                                            label=\"Honoring Choices Training\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.stevieRay}\n                                                    onChange={this.handleEventTypeChange('stevieRay')}\n                                                    color=\"primary\"\n                                                    value=\"The Life and Death Comedy Show with Stevie Ray\"\n                                                />\n                                            }\n                                            label=\"The Life and Death Comedy Show with Stevie Ray\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.deathCafe}\n                                                    onChange={this.handleEventTypeChange('deathCafe')}\n                                                    color=\"primary\"\n                                                    value=\"Death Cafe\"\n                                                />\n                                            }\n                                            label=\"Death Cafe\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.livingWills}\n                                                    onChange={this.handleEventTypeChange('livingWills')}\n                                                    color=\"primary\"\n                                                    value=\"Living Wills Through Art\"\n                                                />\n                                            }\n                                            label=\"Living Wills Through Art\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.tedTalks}\n                                                    onChange={this.handleEventTypeChange('tedTalks')}\n                                                    color=\"primary\"\n                                                    value=\"Discuss TED Talks\"\n                                                />\n                                            }\n                                            label=\"Discuss TED Talks\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.writingParty}\n                                                    onChange={this.handleEventTypeChange('writingParty')}\n                                                    color=\"primary\"\n                                                    value=\"Legacy Letter Writing Party\"\n                                                />\n                                            }\n                                            label=\"Legacy Letter Writing Party\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.eventTypes.healthStory}\n                                                    onChange={this.handleEventTypeChange('healthStory')}\n                                                    color=\"primary\"\n                                                    value=\"Host a Health Story Collaborative\"\n                                                />\n                                            }\n                                            label=\"Host a Health Story Collaborative\"\n                                        />\n\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <DatePicker\n                                                margin=\"normal\"\n                                                label=\"* Date\"\n                                                fullWidth\n                                                value={this.state.selectedDate}\n                                                onChange={this.handleDateChange}\n                                                className={classNames(classes.textField)}\n                                                variant=\"outlined\"\n                                                InputProps={{\n                                                    endAdornment: (\n                                                        <InputAdornment position=\"end\">\n                                                            <IconButton\n                                                            >\n                                                                <EventIcon />\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </MuiPickersUtilsProvider>\n                                    </Grid>\n                                    <Grid item xs={6} sm={4}>\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <TimePicker\n                                                margin=\"normal\"\n                                                label=\"* Start Time\"\n                                                fullWidth\n                                                value={this.state.start_time}\n                                                onChange={this.handleDateChange('start_time')}\n                                                className={classNames(classes.textField)}\n                                                variant=\"outlined\"\n                                                InputProps={{\n                                                    endAdornment: (\n                                                        <InputAdornment position=\"end\">\n                                                            <IconButton\n                                                            >\n                                                                <TimeIcon />\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </MuiPickersUtilsProvider>\n                                    </Grid>\n                                    <Grid item xs={6} sm={4}>\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <TimePicker\n                                                margin=\"normal\"\n                                                label=\"* End Time\"\n                                                fullWidth\n                                                value={this.state.end_time}\n                                                onChange={this.handleDateChange('end_time')}\n                                                className={classNames(classes.textField)}\n                                                variant=\"outlined\"\n                                                InputProps={{\n                                                    endAdornment: (\n                                                        <InputAdornment position=\"end\">\n                                                            <IconButton\n                                                            >\n                                                                <TimeIcon />\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </MuiPickersUtilsProvider>\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={6}>\n                                        <TextValidator\n                                            id=\"location\"\n                                            label=\"* Location\"\n                                            fullWidth\n                                            className={classNames(classes.textField)}\n                                            onChange={this.handleChange('location')}\n                                            name=\"location\"\n                                            type=\"text\"\n                                            margin=\"normal\"\n                                            value={this.state.location}\n                                            validators={['required']}\n                                            errorMessages={['this field is required']}\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={6}>\n                                        <TextValidator\n                                            id=\"audienceSize\"\n                                            select\n                                            fullWidth\n                                            label=\"Audience Size\"\n                                            className={classes.textField}\n                                            value={this.state.audienceSize}\n                                            onChange={this.handleChange('audienceSize')}\n                                            SelectProps={{\n                                                MenuProps: {\n                                                    className: classes.menu,\n                                                },\n                                            }}\n                                            // validators={['required']}\n                                            // errorMessages={['this field is required']}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        >\n                                            {audienceDropdown.map((option, i) => (\n                                                <MenuItem key={i} value={option}>\n                                                    {option}\n                                                </MenuItem>\n                                            ))}\n                                        </TextValidator>\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextValidator\n                                            id=\"contactName\"\n                                            label=\"* Contact Full Name\"\n                                            multiline\n                                            fullWidth\n                                            rowsMax=\"4\"\n                                            type=\"text\"\n                                            value={this.state.contactName}\n                                            onChange={this.handleChange('contactName')}\n                                            className={classes.textField}\n                                            validators={['required']}\n                                            errorMessages={['this field is required']}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextValidator\n                                            id=\"contactEmail\"\n                                            label=\"* Email\"\n                                            multiline\n                                            fullWidth\n                                            rowsMax=\"4\"\n                                            type=\"email\"\n                                            value={this.state.contactEmail}\n                                            onChange={this.handleChange('contactEmail')}\n                                            className={classes.textField}\n                                            validators={['required']}\n                                            errorMessages={['this field is required']}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextValidator\n                                            id=\"contactPhoner\"\n                                            label=\"* Phone Number\"\n                                            multiline\n                                            fullWidth\n                                            rowsMax=\"4\"\n                                            type=\"text\"\n                                            value={this.state.contactPhone}\n                                            onChange={this.handleChange('contactPhone')}\n                                            className={classes.textField}\n                                            validators={['required']}\n                                            errorMessages={['this field is required']}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4} sm={2} >\n                                        <h5 style={{ margin: '0', fontWeight: 'lighter', fontStyle: 'italic' }}>* required</h5>\n                                    </Grid>\n                                    <Grid container spacing={8} justify=\"flex-end\">\n                    \n                                    <Grid item xs={5} sm={2}>\n                                        <Button\n                                            // type=\"submit\"\n                                            onClick={this.handleCancelEdit}\n                                            // style={{float: 'left'}}\n                                            variant=\"contained\"\n                                            fullWidth\n                                            // color=\"secondary\"\n                                                // style={{ color: '#33ab9f' }}\n                                            size=\"large\"\n                                            className={classes.button}>\n                                        Cancel\n                                        </Button>\n                                        </Grid>\n                             \n                                    <Grid item xs={5} sm={2}>\n                                        <Button\n                                            type=\"submit\"\n                                            fullWidth\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            size=\"large\"\n                                            className={classes.button}>\n                                            Submit\n                                        </Button>\n                                    </Grid>\n                                    </Grid>\n                                </Grid>\n                            </ValidatorForm>\n                        </Paper>\n                        {/* <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    open={this.props.confirmPost.open}\n                    autoHideDuration={6000}\n                    onClose={this.handleClose}\n                    ContentProps={{\n                        'aria-describedby': 'message-id',\n                    }}\n                    message={this.alertMessage()}\n                />  */}\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n}\n\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(EventCreateForm));","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport './FollowUp.css'\n\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 8,\n    marginRight: 8,\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 4,\n    paddingBottom: theme.spacing.unit * 4\n  },\n  card: {\n    // maxWidth: 345,\n  },\n  media: {\n    height: 140\n  },\n  button: {\n    margin: theme.spacing.unit\n  },\n  input: {\n    display: \"none\"\n  }\n});\n\n\nclass FollowUp extends Component {\n\n    state = {\n        event: {},\n        queryOk: false,\n        comments: '',\n    }\n\n    componentDidMount() {\n        this.refreshEvent();\n    }\n\n    refreshEvent = () => {\n\n        // The event ID is provided in the URL as a query. We find which event to display using this.\n        let url = window.location.href;\n        url = url.replace('#', '');\n        const queries = queryString.parseUrl(url).query;\n\n        // If there was no event query in the URL, then remember that \n        // the query isnt ok. We'll just render something to direct the user to home page.\n        if (!queries.event) {\n            console.log('No query found for event id.')\n            return;\n        }\n\n        this.setState({queryOk: true});\n        const eventId = queries.event;\n\n        // get the event info for the selected event\n        axios({\n            method: 'GET',\n            url: '/api/events/specific',\n            params: {\n                id: eventId,\n            }\n        })\n        .then( response => {\n\n            // If there were no events with the given ID, update the state\n            // so we can let the user now.\n            if (response.data.length < 1) {\n                this.setState({queryOk: false});\n\n            // If there were events found, (it really should only be 1 event)\n            // then put the event in state so we can display the feedback form.\n            }else {\n                this.setState({event: response.data[0]})\n            }\n        })\n        .catch( error => {\n            console.log(error);\n        })\n    }\n\n    onCommentsChanged = event => {\n        this.setState({comments: event.target.value});\n    }\n\n    // The parameter 'event' here refers to the DOM event, not like, one of our calendar events\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (this.state.comments.length < 1) {\n            alert('Please enter your comments before submitting!');\n            return;\n        }\n\n        console.log(this.state.event);\n\n        axios({\n            method: 'PUT',\n            url: '/api/events/followup',\n            params: {\n                eventId: this.state.event.id,\n                comments: this.state.comments,\n            }\n        })\n        .then(response => {\n            this.setState({comments: ''});\n            this.refreshEvent();\n        })\n\n        .catch(error => {\n            console.log('error submitting followup', error);\n            alert(\"Something went wrong! Please try again in a few minutes\");\n        })\n    }\n\n    render() {\n\n        // Render for missing events\n        if (!this.state.queryOk) {\n            return (\n                <div>\n                    <h1>Event Not Found</h1>\n                    <p>It looks like the event you're looking for isn't here!</p>\n                </div>\n            )\n        }\n\n        const event = this.state.event;\n\n        // If the event already has a followup - we determine this by checking if\n        // followup comments is null\n        if (event.follow_up_comments != null) {\n            return (\n                <div>\n                    <h2>Thanks for your feedback!</h2>\n                </div>\n            )\n        }\n\n        return (\n          <div className=\"followUp\">\n        <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{ marginBottom: '0px' }}>\n   \n           Followup for {event.event_name}\n        </Typography>\n        <Typography gutterBottom component=\"p\" style={{ fontSize: '13px', marginBottom: '0' }}>\n\n            {event.description}\n        </Typography>\n            <form onSubmit={this.handleSubmit}>\n            <div>\n              {/* <input\n                placeholder=\"comments\"\n                value={this.state.comments}\n                onChange={this.onCommentsChanged}\n              /> */}\n\n              <TextField\n                value={this.state.comments}\n                onChange={this.onCommentsChanged}\n                id=\"standard-full-width\"\n                style={{ margin: 8 }}\n                placeholder=\"Comments\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              </div>\n            </form>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={this.handleSubmit}\n            >\n              Submit\n            </Button>\n          </div>\n        );\n    }\n}\n\n\nexport default withStyles(styles)(connect()(FollowUp));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n// import Snackbar from '@material-ui/core/Snackbar';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\n// import CheckCircleIcon from '@material-ui/icons/CheckCircle';\n// import ErrorIcon from '@material-ui/icons/Error';\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from 'material-ui-pickers';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classNames from 'classnames';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport EventIcon from '@material-ui/icons/Event';\nimport { Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport './EventSignUpForm.css';\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginLeft: 8,\n        marginRight: 8,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 4,\n        paddingBottom: theme.spacing.unit * 4,\n    },\n    textField: {\n        marginTop: 4,\n        marginBottom: 15,\n    },\n    menu: {\n        width: 400,\n    },\n    button: {\n        margin: 0,\n        height: 60,\n        fontSize: 20,\n    },\n    icon: {\n        fontSize: 50,\n        verticalAlign: -8,\n        opacity: 0.9,\n        marginRight: theme.spacing.unit,\n    },\n    typography: {\n        useNextVariants: true,\n    },\n    container: {\n        maxWidth: 600,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n});\n\nconst genderDropdown = ['Female', 'Male', 'Prefer Not To Say'];\nconst ethnicityDropdown = ['Asian', 'Black/African American', 'Hispanic/Latino', 'Middle Eastern/North African', 'Native American/Alaskan Native', 'Native Hawaiian/Other Pacific Islander', 'White/Caucasian']\nconst incomeDropdown= ['Less than 20,000', '20,000 - 35,000', '35,000 - 50,000', '50,000 - 75,000', '75,000 - 100,000', '100,000 - 150,000', '150,000 - 200,000', '200,000 or more']\n\nclass EventSignUpForm extends Component {\n\n    state = {\n        authorUserId: this.props.user.id,\n        communityId: this.props.user.community_id,\n        firstName: '',\n        lastName: '',\n        contactPhone: '',\n        contactEmail: '',\n        birthDate: new Date(),\n        income: '',\n        gender: '',\n        ethnicity: '',\n        eventId: 1,\n    }\n\n    componentDidMount = () => {\n        // this.props.dispatch({ type: 'FETCH_TAGS' });\n    }\n\n\n\n    // handles on inputs on form and sets state\n    handleChange = (property) => (event) => {\n        this.setState({\n            ...this.state,\n            [property]: event.target.value\n        });\n    }\n\n    // handles form submit button, sends post dispatch to redux with payload of all selected form inputs + clears form \n    handleSubmit = () => {\n        this.props.dispatch({ type: 'ADD_ATTENDEE', payload: this.state });\n        this.setState({\n            firstName: '',\n            lastName: '',\n            contactPhone: '',\n            contactEmail: '',\n            birthDate: new Date(),\n            income: '',\n            gender: '',\n            ethnicity: '',\n            eventId: 1,\n        });\n    }\n\n    // handles date select from date-picker\n    handleDateChange = date => {\n        this.setState({\n            birthDate: date\n        });\n    };\n\n    // determines which message will display on snackbar depending if post to database was successful  \n    // alertMessage = () => {\n    //     const { classes } = this.props;\n    //     if (this.props.confirmPost.status) {\n    //         return <span id=\"message-id\" style={{ display: 'flex', alignItems: 'center' }}>\n    //             <CheckCircleIcon className={classes.icon} />Project Successfully Added!</span>\n    //     }\n    //     else {\n    //         return <span id=\"message-id\" style={{ display: 'flex', alignItems: 'center' }}>\n    //             <ErrorIcon className={classes.icon} />Project add was unsuccessful</span>\n    //     }\n    // }\n\n    // handles close from snackbar and sends reset dispatch to redux  \n    // handleClose = () => {\n    //     this.props.dispatch({ type: 'RESET_POST' })\n    // };\n    handleCancel = () => {\n        this.props.history.push('/event/view')\n    }\n\n    render() {\n        const { classes } = this.props;\n        console.log('selected event', this.props.selectedEvent)\n        return (\n          <div\n            style={{\n              backgroundImage: `linear-gradient(rgba(212, 212, 212, 0.1), rgba(138, 138, 138, 0.1)), url(images/bloom-blooming-caffeine-768943.jpg)`\n            }}\n            className=\"bckgrnd-container\"\n          >\n            <div className={classes.root}>\n              <div className={classes.container}>\n                <Paper\n                  className={classes.root}\n                  elevation={1}\n                  style={{ marginTop: \"50px\" }}\n                >\n                  <Typography>\n                    <h2\n                      style={{\n                        fontSize: \"32px\",\n                        color: \"#4534e5\",\n                        textAlign: \"center\"\n                      }}\n                    >\n                      <img\n                        src=\"images/eim_icon.png\"\n                        alt=\"End In Mind logo\"\n                        style={{\n                          height: \"45px\",\n                          verticalAlign: \"-4px\",\n                          marginRight: \"10px\"\n                        }}\n                      />\n                      {this.props.selectedEvent.event_name}\n                    </h2>\n                  </Typography>\n                  <Typography>\n                    <h3\n                      style={{\n                        marginBottom: \"28px\",\n                        fontSize: \"25px\",\n                        textAlign: \"center\",\n                        fontFamily: \"Lato\"\n                      }}\n                    >\n                      Welcome!\n                    </h3>\n                  </Typography>\n                  <ValidatorForm\n                    ref=\"form\"\n                    onSubmit={this.handleSubmit}\n                    onError={errors => console.log(errors)}\n                  >\n                    <Grid container spacing={16}>\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"firstName\"\n                          label=\"First Name\"\n                          multiline\n                          fullWidth\n                          rowsMax=\"4\"\n                          type=\"text\"\n                          value={this.state.firstName}\n                          onChange={this.handleChange(\"firstName\")}\n                          className={classes.textField}\n                          // validators={['required']}\n                          // errorMessages={['this field is required']}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"lastName\"\n                          label=\"Last Name\"\n                          multiline\n                          fullWidth\n                          rowsMax=\"4\"\n                          type=\"text\"\n                          value={this.state.lastName}\n                          onChange={this.handleChange(\"lastName\")}\n                          className={classes.textField}\n                          // validators={['required']}\n                          // errorMessages={['this field is required']}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"contactEmail\"\n                          label=\"Email\"\n                          multiline\n                          fullWidth\n                          rowsMax=\"4\"\n                          type=\"email\"\n                          value={this.state.contactEmail}\n                          onChange={this.handleChange(\"contactEmail\")}\n                          className={classes.textField}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"contactPhoner\"\n                          label=\"Phone\"\n                          multiline\n                          fullWidth\n                          rowsMax=\"4\"\n                          type=\"tel\"\n                          pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\"\n                          value={this.state.contactPhone}\n                          onChange={this.handleChange(\"contactPhone\")}\n                          className={classes.textField}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                          <DatePicker\n                            margin=\"normal\"\n                            label=\"Date of Birth\"\n                            fullWidth\n                            value={this.state.birthDate}\n                            onChange={this.handleDateChange}\n                            className={classNames(classes.textField)}\n                            variant=\"outlined\"\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  <IconButton>\n                                    <EventIcon />\n                                  </IconButton>\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </MuiPickersUtilsProvider>\n                      </Grid>\n                      {/* <Grid item xs={12} sm={6}>\n                                        <TextValidator\n                                            id=\"income\"\n                                            InputProps={{\n                                                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                            }}\n                                            label=\"Household Income\"\n                                            fullWidth\n                                            className={classNames(classes.textField)}\n                                            onChange={this.handleChange('income')}\n                                            name=\"income\"\n                                            type=\"number\"\n                                            margin=\"normal\"\n                                            value={this.state.income}\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid> */}\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"income\"\n                          InputProps={{\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                $\n                              </InputAdornment>\n                            )\n                          }}\n                          select\n                          fullWidth\n                          label=\"Income\"\n                          className={classes.textField}\n                          value={this.state.income}\n                          onChange={this.handleChange(\"income\")}\n                          SelectProps={{\n                            MenuProps: {\n                              className: classes.menu\n                            }\n                          }}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        >\n                          {incomeDropdown.map((option, i) => (\n                            <MenuItem key={i} value={option}>\n                              {option}\n                            </MenuItem>\n                          ))}\n                        </TextValidator>\n                      </Grid>\n\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"gender\"\n                          select\n                          fullWidth\n                          label=\"Gender\"\n                          className={classes.textField}\n                          value={this.state.gender}\n                          onChange={this.handleChange(\"gender\")}\n                          SelectProps={{\n                            MenuProps: {\n                              className: classes.menu\n                            }\n                          }}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        >\n                          {genderDropdown.map((option, i) => (\n                            <MenuItem key={i} value={option}>\n                              {option}\n                            </MenuItem>\n                          ))}\n                        </TextValidator>\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <TextValidator\n                          id=\"ethnicity\"\n                          select\n                          fullWidth\n                          label=\"Ethnicity\"\n                          className={classes.textField}\n                          value={this.state.ethnicity}\n                          onChange={this.handleChange(\"ethnicity\")}\n                          SelectProps={{\n                            MenuProps: {\n                              className: classes.menu\n                            }\n                          }}\n                          margin=\"normal\"\n                          variant=\"outlined\"\n                        >\n                          {ethnicityDropdown.map((option, i) => (\n                            <MenuItem key={i} value={option}>\n                              {option}\n                            </MenuItem>\n                          ))}\n                        </TextValidator>\n                      </Grid>\n\n                      {/* <Grid item xs={4} sm={2} >\n                                <h5 style={{ margin: '-20px', marginLeft: '8px', fontWeight: 'lighter', fontStyle: 'italic' }}>* required</h5>\n                            </Grid>  */}\n                      <Grid item xs={12} sm={12}>\n                        <Button\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                          fullWidth\n                          className={classes.button}\n                        >\n                          Check In!\n                        </Button>\n                      </Grid>\n                      <Grid item xs={12} sm={12}>\n                        <Button\n                          type=\"button\"\n                          // variant=\"contained\"\n                          // color=\"secondary\"\n                          fullWidth\n                          className={classes.button}\n                          onClick={this.handleCancel}\n                        >\n                          Cancel\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </ValidatorForm>\n                </Paper>\n                <p className=\"disclaimer\">\n                  <i>\n                    Your participation in completing this form is\n                    voluntary. To help protect confidentiality, all\n                    personally identifying information will be stored\n                    separately from any demographic information. All\n                    data is stored in a password protected electronic\n                    format. If you have any questions about this form,\n                    please contact Jamie Bachaus, End in Mind Program\n                    Manager at jbachaus@endinmindproject.org or call\n                    612-440-6715. Thank you.\n                  </i>\n                </p>\n\n                {/* <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    open={this.props.confirmPost.open}\n                    autoHideDuration={6000}\n                    onClose={this.handleClose}\n                    ContentProps={{\n                        'aria-describedby': 'message-id',\n                    }}\n                    message={this.alertMessage()}\n                />  */}\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n}\n\n\nexport default withStyles(styles)(connect(mapReduxStateToProps)(EventSignUpForm));","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport {connect} from 'react-redux';\n\n// import Nav from '../Nav/Nav';\nimport NavNew from '../Nav/NavNew';\n// import Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\n\nimport LoginPage from '../LoginPage/LoginPage';\nimport Upload from '../Upload/Upload';\nimport CalendarLanding from '../CalendarLanding/CalendarLanding';\nimport AdminSelect from '../AdminSelect/AdminSelect'\n\nimport Dashboard from '../Dashboard/Dashboard';\nimport EventView from '../EventView/EventView';\n\nimport './App.css';\nimport EventCreateForm from '../EventCreateForm/EventCreateForm';\nimport FollowUp from '../FollowUp/FollowUp';\nimport EventSignUpForm from '../EventSignUpForm/EventSignUpForm';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#33ab9f',\n      main: '#4534e5',\n      dark: '#4534e5',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n  typography: {\n    fontFamily: [\n      'PostGrotesk-Book',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    fontSize: '13',\n    useNextVariants: true,\n  },\n});\n\nclass App extends Component {\n\n  state = {\n    dropDownDisplay: ''\n  }\n\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        <MuiThemeProvider theme={theme}>\n          <div>\n          <NavNew/>\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <ProtectedRoute\n              exact\n              path=\"/login\"\n              component={LoginPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={CalendarLanding}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/event/create\"\n              component={EventCreateForm}\n            />\n              <ProtectedRoute\n                exact\n                path=\"/event/signup\"\n                component={EventSignUpForm}\n              />\n            <ProtectedRoute\n              exact\n              path=\"/dashboard\"\n              component={Dashboard}\n            />\n            <Route\n              exact\n              path=\"/calendar\"\n              component={CalendarLanding}\n            />\n              <ProtectedRoute\n              exact\n              path=\"/files\"\n              component={Upload}\n            />\n              <ProtectedRoute\n              exact\n              path=\"/adminselect\"\n              component={AdminSelect}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/event/view\"\n              component={EventView}\n            />\n\n            <ProtectedRoute\n              exact\n              path=\"/event/followup\"\n              component={FollowUp}\n            />\n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          \n        </div>\n        </MuiThemeProvider>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}